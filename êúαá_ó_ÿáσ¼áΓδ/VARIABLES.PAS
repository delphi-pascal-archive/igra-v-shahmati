unit variables;
// Auteur Montero-Ribas
// Logiciel sous license GNU GPL
interface
uses IniFiles, math,graphics,classes;
const Infini = 30000;
  Vide = 0;
  Roi = 1;
  Reine = 2;
  Fou = 3;
  Cavalier = 4;
  Tour = 5;
  Pion = 6;
  RoiNoir = -1;
  ReineNoir = -2;
  FouNoir = -3;
  CavalierNoir = -4;
  TourNoir = -5;
  PionNoir = -6;
  Taille_Pile_Rep = 9;
  Noir = true;
  blanc = false;
  PasPion = -1;
  valeurs_Cases: array[PionNoir..Pion] of smallint = (-110, -500, -400, -400, -1050, 0, 0, 0, 1050, 400, 400, 500, 110);
  Couleur_Blanc = 15793141;
  Couleur_Noir = 8421376;
  finbib = 474;


type T_Tableau = array[0..63] of shortint;
  T_Tableau_smallint = array[0..63] of smallint;
  T_echiquier = record
    Cases: T_Tableau;
    blanc_petit_roque, blanc_grand_roque, noir_petit_roque, noir_grand_roque, Roque_Blanc, Roque_noir: boolean;   { 6 }
    Dernier: Shortint;
    Total: integer;
    Position_Roi: array[blanc..noir] of shortint;
  end;

  Trois_Int = record
    depart, arrivee, efface, QuoiDedans: integer;
  end;
  T_Element = array[1..4] of smallint;
  T_Liste_Coup = record
    position: array[1..128] of T_Element;
    Nb_pos: Integer;
  end;
  T_str100 = string[100];
  T_str64 = string[64];
  T_str12 = string[12];
  T_str2 = string[2];
  T_Str4 = string[4];
  
  T_cases_battues = array[0..63] of byte;
  T_Nb_pion = array[-1..7] of integer;


var Posit, Posit_dessin,lechiquier: T_Echiquier;
  Coups_en_cours, partie_en_cours, Couleur_Ordi: Boolean;
  best_depart, best_arrivee, best_efface, init_prof, largeur, Combien_hist, Index_hist, complexite, profope, la,
  combien_bib, Nb_repetition, Nb_Tour: integer;
  h: cardinal;
  Coups_possibles: T_Liste_Coup;
  bib: array[1..finbib] of T_str64;
  historique, nomdefichier: string;
  hist_int: array[1..200] of Trois_int;
  res_dep_int, res_arr_int: array[1..1500] of integer;
  La_Pile_1, la_Pile_2: array[0..15] of integer;

  la_Pile_Rep: array[0..Taille_Pile_Rep] of T_echiquier;
  cle: string;
  stop,EPD_encours,EPD_noir_dabord,EPD_swap: boolean;
  Couleur_Fond:Tcolor;
  Nb_Eval:Int64;
  cases_battues: T_cases_battues;
  nb_pion_blanc, nb_pion_noir: T_Nb_pion;
  champ:Tstrings;

const
  bonus: array [pionNoir..pion] of T_Tableau_smallint=
  (
   (0, 0, 0, 0, 0, 0, 0, 0,       {pionNoir}
    0, 0, 0, 40, 40, 0, 0, 0,
    -1, -2, -3, 10, 10, -3, -2, -1,
    -2, -4, -6, -8, -8, -6, -4, -2,
    -3, -6, -9, -12, -12, -9, -6, -3,
    -4, -8, -12, -16, -16, -12, -8, -4,
    -5, -10, -15, -20, -20, -15, -10, -5,
    0, 0, 0, 0, 0, 0, 0, 0)
  ,(0, 0, 0, 0, 0, 0, 0, 0,   {tourNoir}
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0 )
  ,(10, 30, 10, 10, 10, 10, 30, 10,  {cavalierNoir}
    10, 0, 0, 0, 0, 0, 0, 10,
    10, 0, 5, 5, 5, 5, 0, 10,
    10, 0, -5, -10, -10, -5, 0, 10,
    10, 0, -5, -10, -10, -5, 0, 10,
    10, 0, -5, -5, -5, -5, 0, 10,
    10, 0, 0, 0, 0, 0, 0, 10,
    10, 10, 10, 10, 10, 10, 10, 10)
  ,(10, 10, 20, 10, 10, 20, 10, 10,   {fouNoir}
    10, 0, 0, 0, 0, 0, 0, 10,
    10, 0, -5, -5, -5, -5, 0, 10,
    10, 0, -5, -10, -10, -5, 0, 10,
    10, 0, -5, -10, -10, -5, 0, 10,
    10, 0, -5, -5, -5, -5, 0, 10,
    10, 0, 0, 0, 0, 0, 0, 10,
    10, 10, 10, 10, 10, 10, 10, 10)
   ,(0, 0, 0, 0, 0, 0, 0, 0,   {reineNoir}
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0 )
  ,( 0, -4, -8, 4, 0, 4, -8, -4,
    4, 4, 4, 4, 4, 4, 4, 4, {roiNoir}
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8)
   ,(0, 0, 0, 0, 0, 0, 0, 0,   {vide}
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0 )
  ,(-8, -8, -8, -8, -8, -8, -8, -8,  {roi}
    -8, -8, -8, -8, -8, -8, -8, -8,
    -8, -8, -8, -8, -8, -8, -8, -8,
    -8, -8, -8, -8, -8, -8, -8, -8,
    -8, -8, -8, -8, -8, -8, -8, -8,
    -8, -8, -8, -8, -8, -8, -8, -8,
    -4, -4, -4, -4, -4, -4, -4, -4,
    0, 4, 8, -4, 0, -4, 8, 4 )
  ,(0, 0, 0, 0, 0, 0, 0, 0,   {reine}
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0 )
  ,(-10, -10, -10, -10, -10, -10, -10, -10, {fou}
    -10, 0, 0, 0, 0, 0, 0, -10,
    -10, 0, 5, 5, 5, 5, 0, -10,
    -10, 0, 5, 10, 10, 5, 0, -10,
    -10, 0, 5, 10, 10, 5, 0, -10,
    -10, 0, 5, 5, 5, 5, 0, -10,
    -10, 0, 0, 0, 0, 0, 0, -10,
    -10, -10, -20, -10, -10, -20, -10, -10)
  ,(-10, -10, -10, -10, -10, -10, -10, -10,  {cavalier}
    -10, 0, 0, 0, 0, 0, 0, -10,
    -10, 0, 5, 5, 5, 5, 0, -10,
    -10, 0, 5, 10, 10, 5, 0, -10,
    -10, 0, 5, 10, 10, 5, 0, -10,
    -10, 0, 5, 5, 5, 5, 0, -10,
    -10, 0, 0, 0, 0, 0, 0, -10,
    -10, -30, -10, -10, -10, -10, -30, -10)
  ,(0, 0, 0, 0, 0, 0, 0, 0,   {tour}
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0 )
  ,(0, 0, 0, 0, 0, 0, 0, 0,    {pion}
    5, 10, 15, 20, 20, 15, 10, 5,
    4, 8, 12, 16, 16, 12, 8, 4,
    3, 6, 9, 12, 12, 9, 6, 3,
    2, 4, 6, 8, 8, 6, 4, 2,
    1, 2, 3, -10, -10, 3, 2, 1,
    0, 0, 0, -40, -40, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0) );

 bonus_fin: array [pionNoir..pion] of T_Tableau_smallint=
  (
   ( -1,-1,-1,-1,-1,-1,-1,-1,     {PionNoir}
     -2,-2,-2,-2,-2,-2,-2,-2,
     -3,-3,-3,-3,-3,-3,-3,-3,
     -4,-4,-4,-4,-4,-4,-4,-4 ,
     -5,-5,-5,-5,-5,-5,-5,-5,
     -6,-6,-6,-6,-6,-6,-6,-6,
     -7,-7,-7,-7,-7,-7,-7,-7,
     -8,-8,-8,-8,-8,-8,-8,-8)
  ,(0, 0, 0, 0, 0, 0, 0, 0,   {tourNoir}
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0 )
   ,(0, 0, 0, 0, 0, 0, 0, 0,   {cavalierNoir}
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0 )
   ,(0, 0, 0, 0, 0, 0, 0, 0,   {fouNoir}
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0 )
   ,(0, 0, 0, 0, 0, 0, 0, 0,   {reineNoir}
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0 )
  ,(0, -10, -20, -30, -30, -20, -10, 0,     {roiNoir}
    -10, -20, -30, -40, -40, -30, -20, -10,
    -20, -30, -40, -50, -50, -40, -30, -20,
    -30, -40, -50, -60, -60, -50, -40, -30,
    -30, -40, -50, -60, -60, -50, -40, -30,
    -20, -30, -40, -50, -50, -40, -30, -20,
    -10, -20, -30, -40, -40, -30, -20, 1-0,
    0, -10, -20, -30, -30, -20, -10, 0  )
   ,(0, 0, 0, 0, 0, 0, 0, 0,   {vide}
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0 )
  ,(0, 10, 20, 30, 30, 20, 10, 0,    {roi}
    10, 20, 30, 40, 40, 30, 20, 10,
    20, 30, 40, 50, 50, 40, 30, 20,
    30, 40, 50, 60, 60, 50, 40, 30,
    30, 40, 50, 60, 60, 50, 40, 30,
    20, 30, 40, 50, 50, 40, 30, 20,
    10, 20, 30, 40, 40, 30, 20, 10,
    0, 10, 20, 30, 30, 20, 10, 0)
  ,(0, 0, 0, 0, 0, 0, 0, 0,   {reine}
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0 )
 ,(0, 0, 0, 0, 0, 0, 0, 0,   {fou}
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0 )
  ,(0, 0, 0, 0, 0, 0, 0, 0,   {cavalier}
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0 )
  ,(0, 0, 0, 0, 0, 0, 0, 0,   {tour}
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0 )
  ,(8,8,8,8,8,8,8,8,         {Pion}
    7,7,7,7,7,7,7,7,
    6,6,6,6,6,6,6,6,
    5,5,5,5,5,5,5,5,
    4,4,4,4,4,4,4,4,
    3,3,3,3,3,3,3,3,
    2,2,2,2,2,2,2,2,
    1,1,1,1,1,1,1,1) );

  Depart: T_Tableau = (-5, -4, -3, -2, -1, -3, -4, -5,
    -6, -6, -6, -6, -6, -6, -6, -6,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    6, 6, 6, 6, 6, 6, 6, 6,
    5, 4, 3, 2, 1, 3, 4, 5);

  Arrivee_Cavalier: T_Tableau = (6, 6, 6, 6, 6, 6, 5, 4,
    7, 7, 7, 7, 7, 7, 5, 4,
    8, 9, 8, 8, 8, 8, 13, 4,
    8, 9, 8, 8, 8, 8, 13, 4,
    8, 9, 8, 8, 8, 8, 13, 4,
    8, 9, 8, 8, 8, 8, 13, 4,
    8, 9, 11, 11, 11, 11, 11, 3,
    8, 9, 10, 10, 10, 10, 10, 2);

  Depart_Cavalier: T_Tableau = (5, 4, 3, 3, 3, 3, 3, 3,
    5, 4, 2, 2, 2, 2, 2, 2,
    5, 4, 1, 1, 1, 1, 8, 1,
    5, 4, 1, 1, 1, 1, 8, 1,
    5, 4, 1, 1, 1, 1, 8, 1,
    5, 4, 1, 1, 1, 1, 8, 1,
    6, 6, 6, 6, 6, 6, 8, 1,
    7, 7, 7, 7, 7, 7, 8, 1);

  Depart_Roi: T_Tableau = (5, 3, 3, 3, 3, 3, 3, 3,
    5, 1, 1, 1, 1, 1, 1, 1,
    5, 1, 1, 1, 1, 1, 1, 1,
    5, 1, 1, 1, 1, 1, 1, 1,
    5, 1, 1, 1, 1, 1, 1, 1,
    5, 1, 1, 1, 1, 1, 1, 1,
    5, 1, 1, 1, 1, 1, 1, 1,
    7, 7, 7, 7, 7, 7, 7, 1);

  Arrivee_Roi: T_Tableau = (7, 7, 7, 7, 7, 7, 7, 5,
    9, 8, 8, 8, 8, 8, 8, 5,
    9, 8, 8, 8, 8, 8, 8, 5,
    9, 8, 8, 8, 8, 8, 8, 5,
    9, 8, 8, 8, 8, 8, 8, 5,
    9, 8, 8, 8, 8, 8, 8, 5,
    9, 8, 8, 8, 8, 8, 8, 5,
    9, 11, 11, 11, 11, 11, 11, 3);

  Deplacement_Roi: array[1..11] of integer = (-8, -9, -1, 7, 8, 9, 1, -7, -8, -9, -1);

  Deplacement_Cavalier: array[1..13] of integer = (-17, -10, 6, 15, 17, 10, -6, -15, -17, -10, 6, 15, 17);

implementation

end.

